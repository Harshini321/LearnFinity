# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, email_id: str=None, insti_id: int=None, is_admin: bool=None, is_prof: bool=None, profile_pic: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param email_id: The email_id of this User.  # noqa: E501
        :type email_id: str
        :param insti_id: The insti_id of this User.  # noqa: E501
        :type insti_id: int
        :param is_admin: The is_admin of this User.  # noqa: E501
        :type is_admin: bool
        :param is_prof: The is_prof of this User.  # noqa: E501
        :type is_prof: bool
        :param profile_pic: The profile_pic of this User.  # noqa: E501
        :type profile_pic: str
        """
        self.swagger_types = {
            'email_id': str,
            'insti_id': int,
            'is_admin': bool,
            'is_prof': bool,
            'profile_pic': str
        }

        self.attribute_map = {
            'email_id': 'email_id',
            'insti_id': 'insti_id',
            'is_admin': 'is_Admin',
            'is_prof': 'is_Prof',
            'profile_pic': 'profile_pic'
        }
        self._email_id = email_id
        self._insti_id = insti_id
        self._is_admin = is_admin
        self._is_prof = is_prof
        self._profile_pic = profile_pic

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_id(self) -> str:
        """Gets the email_id of this User.


        :return: The email_id of this User.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id: str):
        """Sets the email_id of this User.


        :param email_id: The email_id of this User.
        :type email_id: str
        """

        self._email_id = email_id

    @property
    def insti_id(self) -> int:
        """Gets the insti_id of this User.


        :return: The insti_id of this User.
        :rtype: int
        """
        return self._insti_id

    @insti_id.setter
    def insti_id(self, insti_id: int):
        """Sets the insti_id of this User.


        :param insti_id: The insti_id of this User.
        :type insti_id: int
        """

        self._insti_id = insti_id

    @property
    def is_admin(self) -> bool:
        """Gets the is_admin of this User.


        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: bool):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_prof(self) -> bool:
        """Gets the is_prof of this User.


        :return: The is_prof of this User.
        :rtype: bool
        """
        return self._is_prof

    @is_prof.setter
    def is_prof(self, is_prof: bool):
        """Sets the is_prof of this User.


        :param is_prof: The is_prof of this User.
        :type is_prof: bool
        """

        self._is_prof = is_prof

    @property
    def profile_pic(self) -> str:
        """Gets the profile_pic of this User.


        :return: The profile_pic of this User.
        :rtype: str
        """
        return self._profile_pic

    @profile_pic.setter
    def profile_pic(self, profile_pic: str):
        """Sets the profile_pic of this User.


        :param profile_pic: The profile_pic of this User.
        :type profile_pic: str
        """

        self._profile_pic = profile_pic
